"""
Django settings for report project.

Generated by 'django-admin startproject' using Django 1.11.20.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import pathlib
import structlog
from django.dispatch import receiver
from django_structlog import signals

from os2datascanner.projects.django_toml_configuration import process_toml_conf_for_django
from structlog.processors import CallsiteParameter

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = str(pathlib.Path(
    __file__).resolve().parent.parent.parent.parent.absolute())
PROJECT_DIR = os.path.dirname(BASE_DIR)

MEDIA_URL = "/media/"

process_toml_conf_for_django(
    parent_path=PROJECT_DIR,
    module=sys.modules[__name__],
    sys_var='OS2DS_REPORT_SYSTEM_CONFIG_PATH',
    user_var='OS2DS_REPORT_USER_CONFIG_PATH',
)


# Our (third-party) SAML module expects only file or url to be configured. In
# our current setting implementation we only allow changing already set values
# to catch typos early and to not have deprecated settings in layer 2 and 3. To
# circumvent these two incompatibilities, we set file or url as usual and the
# other to empty string. This will unset the empty string:
if not SAML2_AUTH['METADATA_AUTO_CONF_URL']:  # noqa: F821
    del SAML2_AUTH['METADATA_AUTO_CONF_URL']  # noqa: F821
if not SAML2_AUTH['METADATA_LOCAL_FILE_PATH']:  # noqa: F821
    del SAML2_AUTH['METADATA_LOCAL_FILE_PATH']  # noqa: F821


# https://github.com/django/channels/issues/624#issuecomment-609483480
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)]
        }
    }
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'projects', 'shared', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
                'os2datascanner.projects.utils.context_processors.version',
            ],
        },
    },
]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.NumericPasswordValidator'
        ),
    },
]

# Configure log level trace
structlog.stdlib.TRACE = TRACE = 2
structlog.stdlib._NAME_TO_LEVEL['trace'] = TRACE
structlog.stdlib._LEVEL_TO_NAME[TRACE] = 'trace'


def trace(self, msg, *args, **kw):
    return self.log(TRACE, msg, *args, **kw)


# Set above method as the logger.trace()
structlog.stdlib.BoundLogger.trace = trace

structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.stdlib.filter_by_level,
        # Includes module and function name in log messages.
        structlog.processors.CallsiteParameterAdder(
            [CallsiteParameter.MODULE,
             CallsiteParameter.FUNC_NAME],
        ),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.processors.StackInfoRenderer(),
        # format_exc_info will print a more "classic" (non-colorized and non-"enhanced") exc. trace.
        # Which means we'll print an exception twice, but sometimes one prefers one over the other
        # for different reasons.
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)


@receiver(signals.bind_extra_request_metadata)
def structlog_extra_binds(request, logger, **kwargs):
    structlog.contextvars.bind_contextvars(user=request.user.username)
    # I don't think we've ever needed request_id, so to reduce noise: be gone
    structlog.contextvars.unbind_contextvars("request_id")


LOGGING = {
    'version': 1,
    # I'm not sure if we actually want to disable existing loggers really.
    # But, currently, it is very noisy for views if not, filled with  GET static files.
    'disable_existing_loggers': False,
    'formatters': {
        "json": {
            "()": "structlog.stdlib.ProcessorFormatter",
            "processor": structlog.processors.JSONRenderer(),
        },
        "console": {
            "()": "structlog.stdlib.ProcessorFormatter",
            "processor": structlog.dev.ConsoleRenderer(),
        },
        "key_value": {
            "()": "structlog.stdlib.ProcessorFormatter",
            "processor": structlog.processors.KeyValueRenderer(key_order=[
                'timestamp',
                'level',
                'event',
                'logger',
            ]),
        },
        'verbose': {
            'format': (
                '%(levelname)s %(asctime)s %(module)s %(process)d '
                '%(thread)d %(message)s'
            ),
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
    },
    'root': {
        'handlers': ['console'],
        'level': globals()['LOG_LEVEL'],
        'propagate': True,
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django_structlog': {
            'handlers': ['console'],
            'level': globals()['LOG_LEVEL'],
            'propagate': False,
        },
        'os2datascanner': {
            'handlers': ['console'],
            'level': globals()['LOG_LEVEL'],
            'propagate': False,
        },
    }
}

os.makedirs(globals()['BUILD_DIR'], exist_ok=True)

# Set default primary key - new in Django 3.2
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

PROMETHEUS_METRICS_EXPORT_PORT_RANGE = range(5001, 5050)
