:root {
  --datatable-cell-padding: 2em;
  --color-warning-light: #ffedb6;
}

.datatable-wrapper {
  clear: both;
  height: inherit;

  &.scrollable {
    overflow-y: scroll;
  }

  &.sm,
  &.md,
  &.lg,
  &.xl {
    max-width: 100%;
    overflow-x: auto;
  }

  &.sm {
    > .datatable {
      min-width: 35rem;
    }
  }

  &.md {
    > .datatable {
      min-width: 45rem;
    }
  }

  &.lg {
    > .datatable {
      min-width: 55rem;
    }
  }

  &.xl {
    > .datatable {
      min-width: 75rem;
    }
  }

  &.card {
    box-shadow: var(--box-shadow-widget);
    border-radius: none;
    margin-bottom: 0;
    background-color: var(--color-widget-bg);

    @media (min-width: $break-lg) {
      margin-bottom: calc(2 * var(--datatable-cell-padding));
      border-radius: var(--border-radius-widget);
    }
  }

  &.sm.card,
  &.md.card,
  &.lg.card,
  &.xl.card {
    // use gradients to signify that the table is scrollable
    background-image: linear-gradient(
        to right,
        white var(--datatable-cell-padding),
        rgba(255, 255, 255, 0)
      ),
      linear-gradient(to right, #22222244, rgba(255, 255, 255, 0)),
      linear-gradient(
        to left,
        white var(--datatable-cell-padding),
        rgba(255, 255, 255, 0)
      ),
      linear-gradient(to left, #22222244, rgba(255, 255, 255, 0));
    background-repeat: no-repeat;
    background-position: left top, left top, 100% 0, 100% 0;
    background-size: calc(var(--datatable-cell-padding) * 4) 100%,
      var(--datatable-cell-padding) 100%,
      calc(var(--datatable-cell-padding) * 4) 100%,
      var(--datatable-cell-padding) 100%;
    background-attachment: local, scroll, local, scroll;

    &:focus {
      box-shadow: var(--box-shadow-widget), 0 0 0 3px var(--color-primary-light);
    }
  }
}

.datatable {
  border-collapse: separate;
  border-spacing: 0;
  table-layout: fixed;
  width: 100%;

  label {
    cursor: pointer;
  }

  .last-opened {
    opacity: 0.6;
    margin-top: 0.5rem;
  }

  &.disabled {
    pointer-events: none;
    opacity: 0.6;
  }

  .datatable {
    margin: calc(var(--datatable-cell-padding) * -1) 0;
  }

  .button-caret {
    background-color: transparent;

    .material-icons {
      pointer-events: none;
      color: #aaa;
      transition: var(--transition-default);
    }

    &:hover,
    &:focus {
      .material-icons {
        color: var(--color-primary-dark);
      }

      // Don't change the background of the caret button
      background-color: transparent;
    }

    &.up {
      .material-icons {
        transform: rotate(180deg);
      }
    }
  }

  tr.open > td,
  tr.open > th {
    background-color: rgba(0, 0, 0, 0.07);
  }

  tr {
    td {
      transition: opacity 200ms ease-in-out;
    }

    &.soft-load.htmx-swapping td,
    &.soft-load.htmx-settling td {
      opacity: 0;
    }
  }

  .matches-list > td,
  .matches-list > th {
    background-color: rgba(0, 0, 0, 0.035);
  }

  tr.open > th:first-child,
  tr.open > td:first-child,
  .matches-list > th:first-child,
  .matches-list > td:first-child {
    // Emulate border-left. Adding an actual border-left will shift
    // the contents of the row
    box-shadow: inset 4px 0 0 var(--color-primary);
  }

  tr.highlighted > td,
  tr.highlighted > th,
  tr.highlighted + .matches-list > td,
  tr.highlighted + .matches-list > th {
    background-color: var(--color-primary-lightest);
  }

  tr.clickable {
    &:focus {
      background-color: var(--color-primary-lightest);
    }

    &:hover {
      background-color: var(--color-primary-dark);
      color: var(--color-primary-lightest);
      cursor: pointer;
    }
  }

  &--wide {
    max-width: none;
  }

  &__column {
    &--checkbox {
      width: 4.2rem;
    }

    &--name {
      width: 100%;
      word-wrap: break-word;
      white-space: none;

      & > div {
        min-width: 12rem;
      }

      .stale-accounts {
        span {
          display: inline-block;
          margin: -1rem 0px;
          font-size: 1.4em;
          color: var(--color-text-main);
          bottom: -4px;
        }
      }
    }

    &--categories {
      width: 100%;
    }

    &--matchcount {
      width: 5.5rem;
      display: none;

      label {
        &::after {
          content: "#";
        }

        span {
          display: none;
        }
      }

      .withheld-matches {
        color: var(--color-text-secondary);
        margin-top: 0.5rem;

        &::after {
          content: ")";
        }

        &::before {
          content: "(";
        }

        span {
          display: none;
        }
      }

      div.matches_container {
        display: flex;
        align-items: center;
      }

      .warning-symbol {
        color: var(--color-error);
        cursor: default;
        margin-left: 0.5rem;
      }

      @media (min-width: $break-lg) {
        width: 15rem;

        label {
          &::after {
            content: none;
          }

          span {
            display: inline;
          }
        }

        .withheld-matches {
          span {
            display: inline;
          }
        }
      }
    }

    &--datasource_last_modified {
      width: 5.5rem;
      display: none;

      @media (min-width: $break-lg) {
        width: 11rem;
      }
    }

    &--org {
      width: 100%;
      word-wrap: break-word;
    }

    &--expression {
      width: 11rem;
    }

    &--sensitivity {
      width: 12rem;
    }

    &--drive {
      width: 6rem;
    }

    &--validated {
      width: 10rem;
    }

    &--automatic {
      width: 100%;
      max-width: 15rem;
      word-wrap: break-word;
    }

    &--source {
      width: 4.5rem;
      display: none;
    }

    &--path {
      font-size: 0.875rem;
      width: 100%;
      word-wrap: break-word;
    }

    &--scan {
      width: 8rem;
      word-wrap: break-word;
    }

    &--starttime {
      width: 8rem;
    }

    &--status {
      width: 100%;
      word-wrap: break-word;
    }

    &--matchstatus {
      width: 12rem;
    }

    &--nodata {
      text-align: center;
      font-style: italic;
    }

    &--managers {
      width: 150%;
    }

    &--dpos {
      width: 150%;
    }

    &--actions {
      width: 15rem;
      word-wrap: break-word;

      form {
        display: inline-block;
      }
    }

    &--leader-actions {
      width: 16rem;
    }

    &--delete {
      width: 8.5rem;

      .button {
        margin: 0.25rem 0 0 0.25rem;
      }

      > * {
        flex: 0 1 auto;
      }
    }

    &--info {
      width: 20rem;
    }

    &--objects {
      width: 15rem;
    }

    &--shortinfo {
      width: 35%;
    }

    &--btn {
      width: 28rem;
    }
  }

  .domain-url {
    text-overflow: ellipsis;
    word-break: break-all;
  }

  tbody.links {
    tr:hover td {
      cursor: pointer;
      background-color: var(--color-primary-light);
    }

    &.no-header {
      tr:first-of-type {
        td {
          border-top: none;
        }
      }
    }
  }

  a:not(.button) {
    text-decoration: none;
    font-weight: 500;
    color: var(--color-primary);

    &:hover {
      color: var(--color-primary-dark);
    }
  }

  .nothing_found_row {
    text-align: center;
    font-style: italic;
  }
}

@media (min-width: $break-sm) {
  col.datatable__column--matchcount,
  col.datatable__column--datasource_last_modified,
  col.datatable__column--source {
    display: table-column;
  }

  td.datatable__column--matchcount,
  th.datatable__column--matchcount,
  td.datatable__column--datasource_last_modified,
  th.datatable__column--datasource_last_modified,
  td.datatable__column--source,
  th.datatable__column--source {
    display: table-cell;
  }
}

@media (max-width: $break-lg) {
  col.datatable__column--datasource_last_modified,
  td.datatable__column--datasource_last_modified,
  th.datatable__column--datasource_last_modified {
    display: none;
  }
}

@media (min-width: $break-lg) {
  .datasource_last_modified-button {
    display: none;
  }

  .datatable tbody.links.no-header {
    tr:first-of-type {
      td {
        border-top: none;
      }
      td:first-of-type {
        border-top-left-radius: var(--border-radius-widget);
      }
      td:last-of-type {
        border-top-right-radius: var(--border-radius-widget);
      }
    }
  }
}

.compressed {
  --datatable-cell-padding: 1rem;
}

// probability,  start
.probability {
  display: inline-block;
  font-size: 0.75rem;
  font-weight: bold;
  border-radius: var(--border-radius-button);
  color: var(--color-text-white);
  text-align: center;
  width: 3.5rem;
  padding: 0.5rem;
  margin: -0.6rem 0;

  &--red {
    background-color: var(--color-error);
  }

  &--orange {
    background-color: var(--color-problem);
  }

  &--green {
    background-color: var(--color-ok-dark);
  }
}

.datatable th,
.datatable td {
  line-height: normal; // prevent y-overflow
  padding: var(--datatable-cell-padding) calc(var(--datatable-cell-padding) / 2);
  vertical-align: middle;

  &.loading {
    text-align: center;
    font-style: italic;
  }

  .overflow-ellipsis {
    .employee__fullname {
      font-weight: bold;
    }

    .employee__username {
      content: "";
      display: block;
      margin-top: 10px;
    }

    // Only show ellipsis on pc-screens.
    @media (min-width: $break-lg) {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }

  .full-path {
    white-space: normal;
    word-break: break-all;
  }

  &:first-child {
    padding-left: var(--datatable-cell-padding);
  }

  &:last-child {
    padding-right: var(--datatable-cell-padding);
  }
}

.datatable.middle th,
.datatable.middle td {
  vertical-align: middle;
}

.datatable tr.error td {
  border-top: 0;
  padding-top: 0;
}

.datatable .column-headings th,
.datatable .topbar-stick th {
  position: static; // override aggressive position: relative; on * in _base.scss

  .th-flex-container {
    display: flex;
    align-items: center;
  }
}

.datatable .column-headings {
  z-index: 1;

  th {
    font-size: 1rem;
    font-weight: bold;
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
    z-index: 1;
    border-top: 1px solid rgba(0, 0, 0, 0.2);
    background-color: #f4f4f4;
    white-space: nowrap;
    top: calc(
      2rem + var(--size-logo-height) + 12rem
    ); // for sticky purposes; header height + row height of 9rem

    @media (min-width: $break-sm) {
      top: calc(
        2rem + var(--size-logo-height) + 9rem
      ); // for sticky purposes; header height + row height of 9rem
    }

    @media (min-width: $break-md) {
      top: calc(
        2rem + var(--size-logo-height) + 6rem
      ); // for sticky purposes; header height + row height of 6rem
    }

    @media (min-width: $break-lg) {
      top: 6rem; // for sticky purposes
    }
  }
}

.datatable .topbar-stick {
  th {
    background-color: #fff;
    z-index: 2;
    top: calc(
      2rem + var(--size-logo-height)
    ); // for sticky purposes; header height

    &:first-child {
      border-top-left-radius: var(--border-radius-widget);
    }

    &:last-child {
      border-top-right-radius: var(--border-radius-widget);
    }

    @media (min-width: $break-lg) {
      top: 0; // for sticky purposes
    }
  }
}

.datatable .sticky th {
  position: -webkit-sticky;
  position: sticky;
}

.datatable .stuck th {
  border-bottom: 1px solid rgba(0, 0, 0, 0.2);

  &:first-child {
    border-top-left-radius: 0;
  }

  &:last-child {
    border-top-right-radius: 0;
  }
}

.datatable td {
  border-top: 1px solid rgba(0, 0, 0, 0.2);
  transition: background-color 0.2s ease-in-out;
}

/* .datatable--click-rows, start */
.datatable--click-rows td {
  padding: 0;

  &:first-child {
    padding-left: inherit;
  }

  &:last-child {
    padding-right: inherit;
  }
}

.datatable--click-rows a {
  color: inherit;
  display: block;
  padding: 2rem;
  text-decoration: none;
}

/* .datatable--click-rows, stop */

/* Icons and text in datatable  */
.flex {
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
  // margin-top: .5rem;

  > *:not(:last-child) {
    margin-right: 0.5rem;
  }

  &--icon {
    margin-top: -0.25rem;
  }

  &--character {
    margin-top: 1.25rem;
    margin-left: 1rem;
    margin-right: 0.25rem;
  }

  &--bottom {
    margin-bottom: 0.25rem;
  }

  &--width {
    margin-right: 0.75rem;
    height: 1.2rem;
    max-width: 1.5rem;

    &--icon {
      height: auto;
      max-width: 1.5rem;
      color: #222222;
    }
  }

  svg {
    height: 100%;
    width: auto;
  }

  .text {
    color: var(--color-text-secondary);
    font-size: 0.75rem;
    line-height: 1rem;
  }
}

/* expression in datatable  */
.code-grey {
  background-color: #e0e0e0;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: var(--border-radius-button);
  padding: 0.5rem;
}

.scan {
  &__item-title {
    display: block;
  }

  &__item-meta {
    margin-top: var(--size-ds-unit);

    span {
      display: inline-block;
      font-size: 0.75rem;
      margin-right: 0.5rem;
      opacity: 0.75;
    }
  }
}

.text-align-right {
  text-align: right;
}

.dont-break-out {
  overflow-wrap: break-word;
  word-wrap: break-word;

  -ms-word-break: break-all;
  word-break: break-all;
}

.matches-list {
  &__column {
    &--match {
      width: auto;
    }

    &--context {
      width: auto;
    }

    &--probability {
      width: 10%;
    }
  }
}

.match-context {
  &::before,
  &::after {
    content: "[...]";
    color: #aaa;
  }

  &::before {
    padding-right: 0.35em;
  }

  &::after {
    padding-left: 0.35em;
  }
}

.tooltip {
  &.cursor-help {
    cursor: help;
  }
}

[data-tooltip] {
  position: absolute;
  font-size: 0.85rem;
  padding: 0.375rem 0.5rem;
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: var(--border-radius-button);
  background-color: var(--color-body-bg);
  color: var(--color-text-secondary);
  box-shadow: var(--box-shadow-filter);
  width: auto;
  white-space: nowrap;
  z-index: 9999;
  cursor: text;
}

// Icon for the error messages

.table {
  &__icon {
    &--warning {
      color: var(
        --color-warning
      ); // Specific styling for the warning icon in tables
    }
  }
}

.tableUI__container {
  display: flex;
  align-items: center;
  margin-top: 1rem;

  .hit-link {
    margin-top: 0;
  }
}

.datatable tr.warning {
  background-color: var(--color-warning);
}

.datatable tr.problem textarea[readonly="true"] {
  width: 100%;
  padding: 1em;
}

// ***********************************************
// ***********************************************
// ***** THE BIG TABLE REFACTORING ANNO 2024 *****
// ***********************************************
// ***********************************************

// Redmine ticket: [#59413]

// NOTE:
// Change the class name from "datatablex" to "datatable" after all tables have been refactored.
// Remember to do the same in all relevant HTML docs.

// Used between icons and their label text
$uniform_icon-label_gap-size: 0.25rem;

// Magical mixin for instant centered behaviour. So far only available in datatables.
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.datatablex {
  // Box model
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;

  &__card-container {
    // Layout
    overflow: hidden; // Hides overflow from the scrollbar and the background-gradient

    // Box model
    margin-bottom: 0;
    border-radius: 0;

    // Visual
    background-color: var(--color-widget-bg);
    box-shadow: var(--box-shadow-widget);

    @media (min-width: $break-lg) {
      // Box model
      margin-bottom: calc(2 * var(--datatable-cell-padding));
      border-radius: var(--border-radius-widget);
    }
  }

  &__wrapper {
    // Layout
    overflow-x: auto;

    // Box model
    max-width: 100%;
    height: inherit;
    clear: both;

    // Visual
    background-image: // use gradients to signify that the table is scrollable
      linear-gradient(
        to right,
        white var(--datatable-cell-padding),
        rgba(255, 255, 255, 0)
      ),
      linear-gradient(to right, #22222244, rgba(255, 255, 255, 0)),
      linear-gradient(
        to left,
        white var(--datatable-cell-padding),
        rgba(255, 255, 255, 0)
      ),
      linear-gradient(to left, #22222244, rgba(255, 255, 255, 0));
    background-repeat: no-repeat;
    background-position: left top, left top, 100% 0, 100% 0;
    background-size: calc(var(--datatable-cell-padding) * 4) 100%,
      var(--datatable-cell-padding) 100%,
      calc(var(--datatable-cell-padding) * 4) 100%,
      var(--datatable-cell-padding) 100%;
    background-attachment: local, scroll, local, scroll;
  }

  &__row {
    // Styles for all th + td inside datatables
    th:first-child,
    td:first-child {
      padding-left: var(--datatable-cell-padding);
    }

    th:last-child,
    td:last-child {
      padding-right: var(--datatable-cell-padding);
    }

    th,
    td {
      line-height: normal;
      padding: var(--datatable-cell-padding)
        calc(var(--datatable-cell-padding) / 2);
      vertical-align: middle;
    }

    td {
      border-top: 1px solid rgba(0, 0, 0, 0.2);
      transition: opacity 200ms ease-in-out;
    }

    .column .info {
      // Local SCSS vars
      $text-size: 1rem;
      $icon-size: 1.25rem;

      &__wrapper {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
      }

      &__container {
        @include flex-center;
        gap: $uniform_icon-label_gap-size;
      }

      &__label {
        color: var(--color-text-secondary);
        font-size: $text-size;
        line-height: $text-size;
        margin-top: calc(#{$text-size} * 0.115);
      }

      &__icon.material-symbols {
        color: var(--color-primary);
        font-size: $icon-size;
        width: $icon-size;
        height: $icon-size;
        line-height: $icon-size;
      }

      &--none {
        opacity: 50%;
        .material-symbols {
          color: var(--color-text-secondary);
        }
      }
    }
  }

  a:not(.button) {
    // So far only used in the org-table on Admin
    text-decoration: none;
    font-weight: 500;
    color: var(--color-primary);
  }

  .th__flex-container {
    display: flex;
    align-items: center;

    .th-label {
      display: flex;
      align-items: center;
      gap: 4px;
    }
  }

  .nothing_found_row {
    text-align: center;
    font-style: italic;
    color: var(--color-text-secondary);
  }
}

// **************************************
// ***** TABLES IN THE ADMIN MODULE *****
// **************************************

// SCSS vars for über precise and responsive column widths
$sidemenu_and_content: calc(var(--width-sidemenu) + var(--padding-content));
$relative_table_width--admin: calc(100vw - #{$sidemenu_and_content});

$uniform_gap-size: 0.25rem;

// Magical mixin for instant centered behaviour. So far only available in datatables.
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}


// ******************************
// ***** ORGANIZATION TABLE *****
// ******************************

// Redmine ticket: [#59989]

.org-table {
  // Table SCSS vars:
  $fixed-column_width: 8.5rem; // The "fixed" column of this specific table
  $table_width: calc(#{$relative_table_width--admin} - #{$fixed-column_width}); 
  $table_min-width: 70rem; // The size for this specific table

  // Column SCSS vars:
  $width_25: calc(#{$table_width} * 0.25);
  $min-width_25: calc(#{$table_min-width} * 0.25);

  $width_50: calc(#{$table_width} * 0.5);
  $min-width_50: calc(#{$table_min-width} * 0.5);

  // Styles:
  min-width: $table_min-width;

  .column {
    &--name {
      width: clamp(
        calc(#{$min-width_25}),
        calc(#{$width_25}),
        calc(#{$width_25})
      );
    }

    &--info {
      width: clamp(
        calc(#{$min-width_25}),
        calc(#{$width_25}),
        calc(#{$width_25})
      );

      .info {
        // Local SCSS vars
        $text-size: 1rem;
        $icon-size: 1.25rem;

        &__label {
          color: var(--color-text-secondary);
          font-size: $text-size;
          line-height: $text-size;
        }

        .material-symbols {
          color: var(--color-primary);
          font-size: $icon-size;
          width: $icon-size;
          height: $icon-size;
          line-height: $icon-size;
        }
      }
    }

    &--import {
      width: clamp(
        calc(#{$min-width_50}),
        calc(#{$width_50}),
        calc(#{$width_50})
      );
    }

    &--actions {
      // The "fixed" column of this specific table
      width: $fixed-column_width;

      #sso-button {
        /* A "diy" icon made with existing icons from the Material Symbols library*/
        #sso-icon-container {
          $standard-icon-size: 1.5rem; // Same as the standard icon font size
          width: $standard-icon-size;
          height: $standard-icon-size;

          position: relative;

          i {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);

            &#cloud {
              z-index: 1;
            }

            &#key {
              z-index: 2; // Place it on top of cloud icon to imitate "cut-out" effect
              padding-top: 0.25rem;
              color: var(--color-btn-neutral);
              font-variation-settings: "GRAD" -25, "opsz" 20;
              font-size: 18px;
              text-align: center;
            }
          }
        }
      }
    }
  }
}

// ******************************************
// ***** ORGANIZATIONAL STRUCTURE TABLE *****
// ******************************************

// Redmine ticket: [#60290]

.orgunit-table {
  // Table SCSS vars:
  $table_width: $relative_table_width--admin;
  $table_min-width: 70rem; // The size for this specific table

  // Column SCSS vars:
  $width_15: calc(#{$table_width} * 0.15);
  $min-width_15: calc(#{$table_min-width} * 0.15);

  $width_25: calc(#{$table_width} * 0.25);
  $min-width_25: calc(#{$table_min-width} * 0.25);

  $width_30: calc(#{$table_width} * 0.3);
  $min-width_30: calc(#{$table_min-width} * 0.3);

  // Styles:
  min-width: $table_min-width;

  .column {
    $uniform_icon-label_gap-size: 0.25rem;

    &--name {
      width: clamp(
        calc(#{$min-width_25}),
        calc(#{$width_25}),
        calc(#{$width_25})
      );
    }

    &--affiliated-accounts {
      width: clamp(
        calc(#{$min-width_15}),
        calc(#{$width_15}),
        calc(#{$width_15})
      );

      .content-min {
        display: block;
      }

      .content-max {
        display: none;
      }

      @media (min-width: $break-xl) {
        .content-max {
          display: block;
        }

        .content-min {
          display: none;
        }
      }
    }

    &--visibility {
      width: 7.5rem; //120px
      text-align: center;

      .table-icon__container {
        .status {
          @include flex-center;

          &__wrapper {
            @include flex-center;
          }

          &--visibility-on {
            .status__icon {
              color: var(--color-checkmark);
            }
          }

          &--visibility-off {
            .status__icon {
              color: var(--color-clear);
              opacity: 60%;
              font-variation-settings: "FILL" 0 !important;
            }
          }
        }
      }
    }

    &--managers,
    &--dpos {
      width: clamp(
        calc(#{$min-width_30}),
        calc(#{$width_30}),
        calc(#{$width_30})
      );
    }
  }
}

// ****************************************
// ***** ORGANIZATIONS ACCOUNTS TABLE *****
// ****************************************

// Redmine ticket: [#60291]

// TBA

// ************************
// ***** RULES TABLES *****
// ************************

// Redmine ticket: [#60287]

// "CUSTOM RULES":
// "SYSTEM RULES":

// TBA

// **************************
// ***** SCANNER TABLES *****
// **************************

// Redmine ticket: [#60288]

.scannerjob-table {
  // Table SCSS vars:
  // $fixed-column_width: 16rem; // The "fixed" column of this specific table
  $fixed-column_width: 210px; // The "fixed" column of this specific table
  $table_width: calc(#{$relative_table_width--admin} - #{$fixed-column_width}); 
  $table_min-width: 60rem; 

  // Column SCSS vars:
  $width_25: calc(#{$table_width} * 0.25);
  $min-width_25: calc(#{$table_min-width} * 0.25);

  $width_35: calc(#{$table_width} * 0.35);
  $min-width_35: calc(#{$table_min-width} * 0.35);

  $width_40: calc(#{$table_width} * 0.4);
  $min-width_40: calc(#{$table_min-width} * 0.4);

  // Styles:
  min-width: $table_min-width;

  .column {
    &--name {
      width: clamp(
        calc(#{$min-width_35}),
        calc(#{$width_35}),
        calc(#{$width_35})
      );

      .name {
        &__container {
          display: flex;
          flex-direction: column;
          gap: $uniform_icon-label_gap-size;
        }

        &__label {
          &:hover {
            color: var(--color-primary-dark);
          }
        }

        &__org {
          font-size: 0.813rem;
          color: var(--color-text-secondary);
          font-style: italic;
        }
      }

      .UI-container {
        width: fit-content;
        margin-top: 0.5rem;
      }
    }

    &--validation {
      width: clamp(
        calc(#{$min-width_25}),
        calc(#{$width_25}),
        calc(#{$width_25})
      );

      .status {
        @mixin pill-variant($bgColor, $textColor) {
          background-color: $bgColor;
          color: $textColor;
        }

        @include flex-center;

        border-radius: 50px;
        height: 2.125rem;
        width: 6.75rem;
        /* NOTE: This fixed width is a tiny bit bigger than the "natural" width of 
        the "ugyldig"/"invalid" label/badge, so that both types of label/badge have 
        matching width. If the wording changes, then this should be updated as well 
        to fit whatever the "natural" width of the bigger one is. */

        &--valid {
          @include pill-variant(
            var(--color-status-good),
            var(--color-checkmark)
          );
        }

        &--invalid {
          @include pill-variant(var(--color-status-bad), var(--color-clear));
        }

        &__wrapper {
          @include flex-center;
          gap: $uniform_icon-label_gap-size;
          padding: 0 1rem 0 0.625rem; // Asymmetrical padding to compensate for visual weight
        }

        &__label {
          $font-size: 0.875rem;
          font-size: $font-size;
          margin-top: calc(
            #{$font-size} * 0.115
          ); // Google's recommended alignment correction for text next to icons
          font-weight: 500;
        }
      }
    }

    &--automatic {
      width: clamp(
        calc(#{$min-width_40}),
        calc(#{$width_40}),
        calc(#{$width_40})
      );

      .status {
        display: flex;
        align-items: center;
        gap: $uniform_icon-label_gap-size;

        &__icon {
          &.material-symbols {
            font-variation-settings: "wght" 300;
            color: var(--color-text-secondary);
          }
        }

        &__label {
          $font-size: 1rem;
          font-size: $font-size;
          margin-top: calc(#{$font-size} * 0.115);

          color: var(--color-text-main);
        }
      }
    }

    &--actions {
      // The "fixed" column of this specific table
      width: $fixed-column_width;

      .button-group {
        /* NOTE: We might need to re-think this in _buttons.scss instead, but I 
        think it's worth waiting until after we've refactored all datatables */
        flex-wrap: nowrap;

        .button {
          .material-symbols {
            color: var(--color-primary-dark);
          }

          &:hover {
            background-color: var(--color-primary-dark) !important;

            .material-symbols {
              font-variation-settings: "wght" 500, "GRAD" -25 !important;
              color: var(--color-text-white);
            }
          }
        }
      }
    }
  }

  &--webscanner {
    // NOTE: This only applies to the webscanner table

    /* We overwrite the "standard" column distrubution for scannerjob tables 
    because webscanner tables have an extra column with URL's. This requires 
    us to repeat the vars, so we can recalculate the column sizes. */

    $table_min-width: 70rem; // Bigger min-width to account for more table content

    // Column SCSS vars:
    $min-width_20: calc(#{$table_min-width} * 0.2);
    $width_20: calc(#{$table_width} * 0.2);

    $min-width_25: calc(#{$table_min-width} * 0.25);
    $width_25: calc(#{$table_width} * 0.25);

    $min-width_30: calc(#{$table_min-width} * 0.3);
    $width_30: calc(#{$table_width} * 0.3);

    // Styles:
    min-width: $table_min-width;

    .column {
      &--name {
        width: clamp(
          calc(#{$min-width_25}),
          calc(#{$width_25}),
          calc(#{$width_25})
        );
      }

      &--url {
        width: clamp(
          calc(#{$min-width_25}),
          calc(#{$width_25}),
          calc(#{$width_25})
        );

        .tooltip {
          // This could be remade as an mixin and made available for all datatables
          .overflow-ellipsis {
            word-break: break-all;

            // Only applying the ellipsis on pc-screens
            @media (min-width: $break-lg) {
              overflow: hidden;
              text-overflow: ellipsis;
              white-space: nowrap;
              width: calc(#{$width_25}* 0.95);
            }
          }
        }
      }

      &--validation {
        width: clamp(
          calc(#{$min-width_20}),
          calc(#{$width_20}),
          calc(#{$width_20})
        );
      }

      &--automatic {
        width: clamp(
          calc(#{$min-width_30}),
          calc(#{$width_30}),
          calc(#{$width_30})
        );
      }

      // The width for "--actions" is not overwritten.
    }
  }

  &--filescanner {
    // NOTE: This only applies to the filescanner table

    /* We overwrite the "standard" column distrubution for scannerjob tables 
    because filescanner tables have an extra column with URL's. This requires 
    us to repeat the vars, so we can recalculate the column sizes. */

    $table_min-width: 65rem; // Bigger min-width to account for more table content

    // Column SCSS vars:
    $min-width_20: calc(#{$table_min-width} * 0.2);
    $width_20: calc(#{$table_width} * 0.2);

    $min-width_25: calc(#{$table_min-width} * 0.25);
    $width_25: calc(#{$table_width} * 0.25);

    $min-width_35: calc(#{$table_min-width} * 0.35);
    $width_35: calc(#{$table_width} * 0.35);

    // Styles:
    min-width: $table_min-width;

    .column {
      &--name {
        width: clamp(
          calc(#{$min-width_25}),
          calc(#{$width_25}),
          calc(#{$width_25})
        );
      }

      &--drive,
      &--validation {
        width: clamp(
          calc(#{$min-width_20}),
          calc(#{$width_20}),
          calc(#{$width_20})
        );
      }

      &--automatic {
        width: clamp(
          calc(#{$min-width_35}),
          calc(#{$width_35}),
          calc(#{$width_35})
        );
      }

      // The width for "--actions" is not overwritten.
    }
  }
}

// ******************************
// ***** SCAN STATUS TABLES *****
// ******************************

// Redmine ticket: [#60289]

// ONGOING SCANS:
// FINISHED SCANS:
// ERROR MESSAGES:

// TBA

// ***************************************
// ***** TABLES IN THE REPORT MODULE *****
// ***************************************

// ***** NOTES *****

  /* Report doesn't have the side nav like Admin, BUT all content will be 
  getting a max-width, so calculations for column width are a bit different 
  here. */

// **********************************
// ***** RESULT OVERVIEW TABLES *****
// **********************************

// Redmine ticket: [#60320]

// ***** REPORT *****

// PERSONAL:
// REMEDIATOR:
// UNDISTRIBUTED:

// TBA

// ***** ARCHIVE *****

// PERSONAL:
// REMEDIATOR:
// UNDISTRIBUTED:

// TBA

// *********************************
// ***** LEADER OVERVIEW TABLE *****
// *********************************

// Redmine ticket: [#60320]

.leaderoverview-table {
  // Table SCSS vars:
  $fixed-column_width: 15.5rem; // 248px
  $table_min-width: 65rem;

  // // Column SCSS vars:
  $width_20: 20%;
  $min-width_20: calc((#{$table_min-width} - #{$fixed-column_width}) * 0.2);

  $width_30: 30%;
  $min-width_30: calc((#{$table_min-width} - #{$fixed-column_width}) * 0.3);

  $width_50: 50%;
  $min-width_50: calc((#{$table_min-width} - #{$fixed-column_width}) * 0.5);

  // Styles:
  min-width: $table_min-width;

  .column {
    $uniform_gap-size: 0.25rem; // NOTE: eventually this needs to be standardized.
    $font-size_subtitle: 0.875rem; // NOTE: eventually this needs to be standardized.

    &--employee {
      width: clamp(
        calc(#{$min-width_50}), 
        calc(#{$width_50}), 
        calc(#{$width_50}));

      .employee {
        &__container {
          display: flex;
          flex-direction: column;
          gap: $uniform_gap-size;
        }

        &__fullname {
          font-weight: bold;
        }
        
        &__username {
          color: var(--color-text-secondary);
          font-size: $font-size_subtitle;
        }
      }
    }

    &--matches {
      width: clamp(
        calc(#{$min-width_20}), 
        calc(#{$width_20}), 
        calc(#{$width_20}));
      
      padding-right: var(--datatable-cell-padding);

      @media (min-width: $break-xl) {
        // Increasing the spacing, between this column and the next, on large screens.
        padding-right: calc(var(--datatable-cell-padding) * 3);
      }

      .th__flex-container {
        justify-content: end;
      }

      &:not(:first-child) {
        text-align: right;
        margin-right: 0.25rem;
      }

      .datatable-numeral {
        margin-right: 0.375rem; // Aligning the number in the <td> with the caret icon in the <th>
      }
    }

    &--withheld {

      .datatable-numeral {
        margin-left: 6.75rem; // Aligning the number in the <td> with the caret icon in the <th>
      }
    }

    &--status, &--withheld {
      width: clamp(
        calc(#{$min-width_30}), 
        calc(#{$width_30}), 
        calc(#{$width_30}));

      .help-tooltip {
        $icon-size: 1.25rem; // Local var setting a fixed size for this element.
        
        // Layout
        vertical-align: middle;

        // Box Model
        width: $icon-size;
        height: $icon-size;

        .material-symbols#help {
          // Visual
          color: var(--color-primary-dark);
          opacity: 50%;

          // Typograhy
          font-size: $icon-size;
          font-variation-settings: 'opsz' 20;
        }
      }
    }

    &--actions { // The "fixed" column of this specific table
      width: $fixed-column_width;

      .button-group {
        flex-wrap: nowrap;
      }

      #expand_more { // The caret icon
        color: var(--color-primary-dark);
      }
    }

    &--loading { // The element shown while content is loaded.
      text-align: center;
    }

    &--nodata { // The element shown, when there's no content to show for the selected organization.
      // Visual
      color: var(--color-text-secondary);
      
      // Typography
      text-align: center;
      font-style: italic;
    }
  }

  .datatablex__row {
    // Adding appropriate styling to the expanded row only.
    &.user-overview {
      box-shadow: inset 4px 0 0 var(--color-primary);
      background-color: rgba(0, 0, 0, 0.035);
    }
  }
}
