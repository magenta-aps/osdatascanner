# The contents of this file are subject to the Mozilla Public License
# Version 2.0 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
#    http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# OS2datascanner is developed by Magenta in collaboration with the OS2 public
# sector open source network <https://os2.eu/>.
#

from enum import Enum

from django.db import models
from django.utils.translation import ugettext_lazy as _

from mptt.models import TreeForeignKey

from .broadcasted_mixin import Broadcasted
from .synchronized_mixin import Synchronized


class Role(Enum):
    """Enumeration of distinguished positions in organizations

    Members are defined by a (value, label) tuple to support translation of
    choice labels.
    """
    # TODO: consider if the values (goes in db) should be e.g. "EMP", "MAN", "PDO" instead? I prefer more readable values, but oppinions may differ
    EMPLOYEE = ('employee', _('employee'))
    MANAGER = ('manager', _('manager'))
    DPO = ('dpo', _('data protection officer'))

    # TODO: consider extraction __new__ and __choices__ to a separate base class for all Enums used as choices in models? I believe we should (also makes testing easier)
    def __new__(cls, value, label):
        # TODO: should we do param/return annotations in our docstrings for autogenerated docs? Or are those not activated on our ReadTheDocs?
        """Return new member

        Takes a value and a label as arguments.
        """
        obj = object.__new__(cls)
        obj._value_ = value
        obj.label = label
        return obj

    @classmethod
    def choices(cls):
        return [(e.value, e.label.capitalize()) for e in cls]


class Position(Synchronized, Broadcasted, models.Model):
    # TODO: should we add help-texts?
    account = models.ForeignKey(
        'Account',
        on_delete=models.CASCADE,
        related_name='positions',
        verbose_name=_('account'),
    )
    unit = TreeForeignKey(
        'OrganizationalUnit',
        on_delete=models.CASCADE,
        verbose_name='organizational unit',
    )
    role = models.CharField(
        max_length=30,
        choices=Role.choices(),
        null=False,
        blank=False,
        default=Role.EMPLOYEE.name,
        db_index=True,  # TODO: I'm pretty sure we want this, do we need other indexes anywhere?
    )

    class Meta:
        unique_together = [('account', 'unit')]
        verbose_name = _('position')
        verbose_name_plural = _('positions')

    def __str__(self):
        format_string = _("Position: {account} ({role}) at {unit}")
        cls = self.__class__.__name__
        account = self.account
        role = Role(self.role).label
        unit = self.unit.name
        return format_string.format(account=account, role=role, unit=unit)

    def __repr__(self):
        cls = self.__class__.__name__
        account = self.account
        role = self.role
        unit = self.unit
        return f"<{cls}: {account} (account) is {role} at {unit} (unit)>"
