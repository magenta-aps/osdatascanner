# SPDX-FileCopyrightText: 2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

# THIS FILE CONTAINS DEFAULT CONFIGURATION SETTINGS. DO NOT CHANGE!!!
# To change the configuration of a specific instance, go the user configuration
# file. For development, the user configuration file is found here:
# /dev-environment/dev-settings.toml

SECRET_KEY = ""
DECRYPTION_HEX = ""

# django-prometheus will try to connect to postgresql during collectstatic
# without this setting: https://github.com/korfuri/django-prometheus/issues/34.
# It only collects a count of un-run migrations, which we don't really care
# about anyways, so we just leave it off.
PROMETHEUS_EXPORT_MIGRATIONS = false
# Prometheus pushgateway, used as input when push_to_gateway method is used.
# Must point to the pushgateway, example: http://pushgateway:9091
# Without it, no metrics can be pushed to the pushgateway.
PUSHGATEWAY_HOST = ""

# [mode]
DEBUG = false
PRODUCTION = false

# [functionality]
EXCLUSION_RULES = false
ANALYSIS_PAGE = false
AUTOMATIC_IMPORT_CLEANUP = false
MANUAL_PAGE = false

# [site]
# The URL of this site, used in links in emails and in the redirect URL for
# OAuth 2.0 services. (This value should end with a forward slash.)
SITE_URL = "*"
SITE_ID = 1
ALLOWED_HOSTS = []
SESSION_COOKIE_NAME = "sessionid"

REPORT_URL = "*"

# [keycloak]
KEYCLOAK_BASE_URL = ""
KEYCLOAK_ADMIN_CLIENT = "os2datascanner_admin"
KEYCLOAK_ADMIN_SECRET = ""

# [msgraph]
# The GUID of the registered Azure application corresponding to this
# OS2datascanner installation, used when requesting Microsoft Graph access:
MSGRAPH_APP_ID = ""
# The client secret used to demonstrate to Microsoft Graph that this
# OS2datascanner installation corresponds to a registered Azure application
# (client private keys are not yet supported):
MSGRAPH_CLIENT_SECRET = ""

# [os2mo]
OS2MO_TOKEN_URL = ""
# The base URL for the GraphQL endpoints of an OS2mo installation; for example,
# "https://os2mo.vstkom.dk/graphql/". Note that the trailing slash is required
OS2MO_ENDPOINT_BASE = ""
OS2MO_CLIENT_ID = ""
OS2MO_CLIENT_SECRET = ""
# UUID of Mo-address type that holds employee emailaddress
OS2MO_EMAIL_ADDRESS_TYPE = ""
# Pagination size/limit of results pr. query
OS2MO_PAGE_SIZE = 1


# [sbsys]
# Using oauth with grant type client_credentials.
# These settings must be provided to later retrieve a token
# to then make API calls.
SBSYS_CLIENT_ID = ""
SBSYS_CLIENT_SECRET = ""
SBSYS_TOKEN_URL = ""
# API url should be pasted ending with "api/"
SBSYS_API_URL = ""

# [test]
TEST_RUNNER = "xmlrunner.extra.djangotestrunner.XMLTestRunner"
TEST_OUTPUT_DESCRIPTIONS = true
TEST_OUTPUT_VERBOSE = true
# TEST_OUTPUT_FILE_NAME is set under dirs

# [installation]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'recurrence',
    'mptt',
    'django_extensions',
    'django_prometheus',
    'channels',
    'channels_redis',
    'rest_framework',
]
OS2DATASCANNER_APPS = [
    'os2datascanner.projects.admin.adminapp',
    'os2datascanner.projects.admin.core',
    'os2datascanner.projects.admin.organizations',
    'os2datascanner.projects.admin.import_services',
    'os2datascanner.projects.admin.grants',
    'os2datascanner.core_organizational_structure.apps.CoreOrganizationalStructureConfig'
]

# placeholder configs for DEVs. Keys must exist here if they should be read from
# user-config toml
OPTIONAL_APPS = []
OPTIONAL_MIDDLEWARE = []
INTERNAL_IPS = []
# XXX: is actually a dict but initialized as list due to how @toml files are parsed
DEBUG_TOOLBAR_CONFIG = []

AUTH_PROFILE_MODULE = "os2datascanner.projects.admin.adminapp.UserProfile"
ASGI_APPLICATION = "os2datascanner.projects.admin.asgi.application"
ROOT_URLCONF = "os2datascanner.projects.admin.urls"
STATIC_URL = "/static/"
STATICFILES_DIRS = [
  '/code/src/os2datascanner/projects/static/dist'
]
ICON_SPRITE_URL = "/static/svg/symbol-defs.svg"
LOGIN_REDIRECT_URL = "/"
NOTIFICATION_INSTITUTION = ""

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_structlog.middlewares.RequestMiddleware",
    # Needed to allow iframe when starting scannerjob
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Add settings here to make them accessible from templates
SETTINGS_EXPORT = [
    'DEBUG',
    'ENABLE_FILESCAN',
    'ENABLE_EXCHANGESCAN',
    'ENABLE_WEBSCAN',
    'ENABLE_DROPBOXSCAN',
    'ENABLE_MSGRAPH_MAILSCAN',
    'ENABLE_MSGRAPH_FILESCAN',
    'ENABLE_MSGRAPH_CALENDARSCAN',
    'ENABLE_MSGRAPH_TEAMS_FILESCAN',
    'ENABLE_GOOGLEDRIVESCAN',
    'ENABLE_GMAILSCAN',
    'ENABLE_SBSYSSCAN',
    'ENABLE_MINISCAN',
    'ICON_SPRITE_URL',
    'ESTIMATE_AFTER',
    'EXCLUSION_RULES',
    'ANALYSIS_PAGE',
    'MINISCAN_FILE_SIZE_LIMIT',
    'MANUAL_PAGE'
]

# [internationalization]
LANGUAGE_CODE = "da-dk"
# Paths relative to the project directory should start with "*" while
# absolute paths should start with "/"
_LOCALE_PATHS = [
    ["*", "src", "os2datascanner", "projects", "admin", "locale"],
]
_LANGUAGES = [
    ["da", "Danish"],
]
TIME_ZONE = "Europe/Copenhagen"
USE_I18N = true
USE_L10N = true
USE_TZ = true
USE_THOUSAND_SEPARATOR = true

# [email]
DEFAULT_FROM_EMAIL = "(Magenta Info) info@magenta.dk"
ADMIN_EMAIL = "(Magenta Admin) info@magenta.dk"
EMAIL_HOST = "localhost"
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_USE_TLS = false
EMAIL_PORT = 25
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

# [scans]
ENABLE_FILESCAN = false
ENABLE_WEBSCAN = false
ENABLE_EXCHANGESCAN = false
ENABLE_DROPBOXSCAN = false
ENABLE_MSGRAPH_MAILSCAN = false
ENABLE_MSGRAPH_FILESCAN = false
ENABLE_MSGRAPH_CALENDARSCAN = false
ENABLE_MSGRAPH_TEAMS_FILESCAN = false
ENABLE_GOOGLEDRIVESCAN = false
ENABLE_GMAILSCAN = false
ENABLE_SBSYSSCAN = false

# [logging]
DJANGO_LOG_LEVEL = "INFO"

# These settings are Django-specific, and must be top level to get picked up
AMQP_PIPELINE_TARGET = "os2ds_scan_specs"
AMQP_CONVERSION_TARGET = "os2ds_conversions"
AMQP_EVENTS_TARGET = "os2ds_events"

# Automatically wait for RabbitMQ confirmation when sending broadcast messages?
AMQP_BROADCAST_SYNC = true

# [stats]
SNAPSHOT_PARAMETER = 1.02

# [storage]
# File storage class - default is regular file system storage
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
# Google Cloud Storage bucket name (for django-storages[google]), requires the above
# to be set to 'storages.backends.gcloud.GoogleCloudStorage'
# See https://django-storages.readthedocs.io/en/latest/backends/gcloud.html
GS_BUCKET_NAME = ""

# Don't estimate the duration of a scan until at least this fraction of it is
# complete; 0.0 means that estimates will immediately be given, and 1.0 means
# that they never will (early estimates are always less accurate)
ESTIMATE_AFTER = 0.05

SHELL_PLUS_IMPORTS = ["from os2datascanner._interactive import *"]

# Should the mini-scanner at /miniscan/ be enabled?
ENABLE_MINISCAN = false
# Should the mini-scanner require the user to be logged in?
MINISCAN_REQUIRES_LOGIN = true
# The largest file size the mini-scanner should accept (in bytes)
MINISCAN_FILE_SIZE_LIMIT = 1048576

[amqp]
# Nested amqp settings are picked up by the common amqp utility module
AMQP_HOST = "localhost"
AMQP_USER = ""
AMQP_PWD = ""
AMQP_SCHEME = "amqp"
AMQP_PORT = 5672
AMQP_HEARTBEAT = 6000
AMQP_VHOST = "/"
    [amqp.AMQP_BACKOFF_PARAMS]
    max_tries = 10
    ceiling = 7
    warn_after = 6
    fuzz = 0

[DATABASES]

    [DATABASES.default]
    ENGINE = "django_prometheus.db.backends.postgresql"
    NAME = "os2datascanner_admin"
    USER = "os2datascanner_admin"
    PASSWORD = ""
    HOST = "127.0.0.1"

[DATABASE_POOL_ARGS]
max_overflow = 10
pool_size = 5
recycle = 300

[dirs]
# These are the settings for various directories.
# Paths relative to the project directory should start with "*" while
# absolute paths should start with "/"
BUILD_DIR = ["*", "build"]
VAR_DIR = ["*", "var"]
LOGS_DIR = ["*", "var", "logs"]
STATIC_ROOT = ["*", 'src', 'os2datascanner', 'projects', 'static', 'admin']
MEDIA_ROOT = ["*", "uploads", "admin"]
TEST_OUTPUT_FILE_NAME = ["*", "build", "test-results.xml"]
