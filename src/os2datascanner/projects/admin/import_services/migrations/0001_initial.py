# Generated by Django 2.2.18 on 2021-04-26 16:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0003_add_imported_mixin'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImportService',
            fields=[
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='organizations.Organization', verbose_name='organization UUID')),
            ],
            options={
                'verbose_name': 'import service',
                'verbose_name_plural': 'import services',
            },
        ),
        migrations.CreateModel(
            name='LDAPConfig',
            fields=[
                ('importservice_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='import_services.ImportService')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('last_modified', models.DateTimeField(verbose_name='last modified')),
                ('last_exported', models.DateTimeField(blank=True, null=True, verbose_name='last successful export')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='marked for deletion at')),
                ('vendor', models.CharField(choices=[('ad', 'Active Directory'), ('other', 'Anden leverandør')], max_length=32, verbose_name='vendor')),
                ('username_attribute', models.CharField(help_text="Name of LDAP attribute, which is mapped as username. For many LDAP server vendors it can be 'uid'. For Active Directory it can be 'sAMAccountName' or 'cn'. The attribute should be filled for all LDAP user records you want to import from LDAP.", max_length=64, verbose_name='username LDAP attribute')),
                ('rdn_attribute', models.CharField(help_text="Name of LDAP attribute, which is used as RDN of typical user DN. Usually, but not necessarily, the same as username LDAP attribute. For example for Active Directory, it is common to use 'cn' as RDN attribute when username attribute might be 'sAMAccountName'.", max_length=64, verbose_name='RDN LDAP attribute')),
                ('uuid_attribute', models.CharField(help_text="Name of LDAP attribute, which is used as unique object identifier (UUID) for objects in LDAP. For many LDAP server vendors, it is 'entryUUID'; however some are different. For example for Active Directory it should be 'objectGUID'. If your LDAP server does not support the notion of UUID, you can use any other attribute that is supposed to be unique among LDAP users in the tree. For example 'uid' or 'entryDN'.", max_length=64, verbose_name='UUID LDAP attribute')),
                ('user_obj_classes', models.TextField(help_text="All values of LDAP objectClass attribute for users in LDAP divided by comma. For example: 'inetOrgPerson, organizationalPerson'. User records are only imported if they have all those classes.", verbose_name='user object classes')),
                ('connection_protocol', models.CharField(choices=[('ldap://', 'ldap'), ('ldaps://', 'ldaps')], default='ldaps://', help_text='Choose between an encrypted connection protocol (ldaps) or an unencrypted one (ldap). Only select the unencrypted protocol if absolutely necessary.', max_length=8, verbose_name='connection protocol')),
                ('connection_url', models.CharField(help_text='Connection URL to the LDAP server. ', max_length=256, verbose_name='connection URL')),
                ('users_dn', models.TextField(help_text='Distinguished name for the (top) OU in which to search for users.', verbose_name='DN for users (OU)')),
                ('search_scope', models.PositiveSmallIntegerField(choices=[(1, 'Kun øverste lag'), (2, 'Hele undertræet')], help_text='For one level, the search applies only for users in the DNs specified by User DNs. For subtree, the search applies to the whole subtree. See LDAP documentation for more details.', verbose_name='search scope')),
                ('bind_dn', models.TextField(help_text='Distinguished name for the service account allowing access to LDAP', verbose_name='LDAP service account user name')),
                ('_iv_ldap_credential', models.BinaryField(blank=True, db_column='iv_ldap', max_length=32, verbose_name='initialization vector for ldap credential')),
                ('_cipher_ldap_credential', models.BinaryField(blank=True, db_column='cipher_ldap', max_length=1024, verbose_name='cipher text for ldap credential')),
            ],
            options={
                'verbose_name': 'LDAP configuration',
                'verbose_name_plural': 'LDAP configurations',
            },
            bases=('import_services.importservice', models.Model),
        ),
        migrations.CreateModel(
            name='Realm',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('last_modified', models.DateTimeField(verbose_name='last modified')),
                ('last_exported', models.DateTimeField(blank=True, null=True, verbose_name='last successful export')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='marked for deletion at')),
                ('realm_id', models.SlugField(allow_unicode=True, primary_key=True, serialize=False, verbose_name='realm id')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='organizations.Organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'Keycloak realm',
                'verbose_name_plural': 'Keycloak realms',
            },
        ),
    ]
