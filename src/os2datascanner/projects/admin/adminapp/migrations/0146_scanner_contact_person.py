# Generated by Django 3.2.11 on 2025-01-20 06:44

from django.conf import settings
from django.db import migrations, models
from django.db.models import Q


def connect_contacts_to_all_scanners(apps, schema_editor):
    User = apps.get_model("auth", "User")
    Scanner = apps.get_model("os2datascanner", "Scanner")
    Organization = apps.get_model("organizations", "Organization")

    def determine_contact(scanner):

        relevant_users = User.objects.filter(
                Q(administrator_for__client=scanner.organization.client) |
                Q(groups__permissions__codename="view_client") |
                Q(user_permissions__codename="view_client") |
                Q(is_superuser=True)
            ).distinct()

        # Try to send the email to the same email as usual
        org_email = scanner.organization.contact_email
        if org_email:
            users_with_that_email = relevant_users.filter(email=org_email)
            if users_with_that_email.exists():
                print(f"Found users with the email {org_email}")
                return users_with_that_email.first()
        else:
            print("Organization has no email!")

        # Okay, no users with that email exists. We will choose another.
        # We want to do slightly different things if there are more than one organization
        org_num = Organization.objects.count()
        if org_num == 1:
            # If there is only one organization, we are _not_ on SaaS. We will grab the first
            # user with access to all clients.
            superadmin = relevant_users.filter(Q(groups__permissions__codename="view_client") |
                                               Q(user_permissions__codename="view_client") |
                                               Q(is_superuser=True)).first()
            if superadmin:
                print(f"Found a superadmin: {superadmin}")
                return superadmin

            # Oops, no superadmin here. Ok, I guess we will use any admin
            if relevant_users.exists():
                print(f"Found another admin: {relevant_users.first()}")
                return relevant_users.first()

        else:
            # Ok, we are most likely on SaaS. We don't want to use the superadmins group here.
            # Instead, we will use the first admin.
            admins = relevant_users.filter(administrator_for__client=scanner.organization.client)
            if admins.exists():
                return admins.first()

    for scanner in Scanner.objects.iterator():
        scanner.contacts.add(determine_contact(scanner))


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('os2datascanner', '0145_add_mimetypeprocessstat'),
    ]

    operations = [
        migrations.AddField(
            model_name='scanner',
            name='contacts',
            field=models.ManyToManyField(related_name='contact_for', to=settings.AUTH_USER_MODEL, verbose_name='contacts', blank=True, help_text='The users who should be notified on completed scans.'),
        ),
        migrations.RunPython(connect_contacts_to_all_scanners, reverse_code=migrations.RunPython.noop),
    ]
