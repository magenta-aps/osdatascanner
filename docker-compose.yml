version: '3.4'
services:
  db:
    image: postgres:12
    env_file:
      - dev-environment/db.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres-initdb.d/10-test-for-valid-env-variables.sh:/docker-entrypoint-initdb.d/10-test-for-valid-env-variables.sh
      - ./docker/postgres-initdb.d/20-create-admin-db-and-user.sh:/docker-entrypoint-initdb.d/20-create-admin-db-and-user.sh
      - ./docker/postgres-initdb.d/40-create-report-db-and-user.sh:/docker-entrypoint-initdb.d/40-create-report-db-and-user.sh
      # The following file adds the CREATEDB privilege to the db users to enable it
      # to run the django tests.
      # THIS SHOULD NOT BE USED IN PRODUCTION!!!
      - ./dev-environment/postgres-initdb.d/50-add-createdb-permissions.sh:/docker-entrypoint-initdb.d/50-add-createdb-permissions.sh
      - ./dev-environment/postgres-initdb.d/60-dummy-database.sqldump:/docker-entrypoint-initdb.d/60-dummy-database.sqldump
      - ./dev-environment/postgres-initdb.d/60-dummy-database-import.sh:/docker-entrypoint-initdb.d/60-dummy-database-import.sh
  queue:
    # Normally, we expect the `rabbitmq` image. The -management images come
    # with a set of management plugins installed and enabled by default.
    # They can be accessed through the web interface on port 15672 (or the port
    # it has been remapped to).
    # The credentials are given in the specified `rabbitmq.env` file.
    image: rabbitmq:3-management-alpine
    hostname: os2datascanner_msg_broker
    env_file:
      - dev-environment/rabbitmq.env
    ports:
      - "5672:5672"
      - "8030:15672"

    
  report_frontend:
    build:
      context: .
      dockerfile: docker/report/Dockerfile
      target: frontend
    volumes:
      - ./src/os2datascanner/projects/report/reportapp/static/src:/code/src/os2datascanner/projects/report/reportapp/static/src
      - frontend-bundles-report:/code/src/os2datascanner/projects/report/reportapp/static/dist/
      - /code/frontend/mode_modules
   
  report_application:
    build:
      context: .
      dockerfile: docker/report/Dockerfile
      target: application
    command: daphne -b 0.0.0.0 -p 5000 os2datascanner.projects.report.asgi:application
    
    volumes:
      - frontend-bundles-report:/code/src/os2datascanner/projects/report/reportapp/static/dist/
      - ./dev-environment/report/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    ports:
      - "8040:5000"
    depends_on:
      - db
      - report_frontend
      - queue


  redis:
    restart: always
    image: redis:latest
    expose:
      - "6379"


  idp:
    image: magentalabs/simplesamlphp:2.0.0
    environment:
      - SIMPLESAMLPHP_BASEURLPATH=http://localhost:8080/simplesaml/
      - SIMPLESAMLPHP_SP_ENTITY_ID=http://localhost:8040/saml2_auth/acs/
      - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=http://localhost:8040/saml2_auth/acs/
# Replace the three env variables above with these below, if you wish to test Keycloak.
#      - SIMPLESAMLPHP_SP_ENTITY_ID=http://localkeycloak.os2datascanner:8090/auth/realms/magenta
#      - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=http://localkeycloak.os2datascanner:8090/auth/realms/magenta/broker/saml/endpoint
#      - SIMPLESAMLPHP_SP_SINGLE_LOGOUT_SERVICE=http://localkeycloak.os2datascanner:8090/auth/realms/magenta/broker/saml/endpoint
    volumes:
      - ./dev-environment/authsources.php:/var/www/simplesamlphp/config/authsources.php
    ports:
      - "8080:8080"

volumes:
  frontend-bundles-report:
  postgres-data:
  postgres-initdb.d:
