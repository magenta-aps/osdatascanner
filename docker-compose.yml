version: '3.4'
services:
  db:
    image: postgres:12
    env_file:
      - dev-environment/db.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres-initdb.d/10-test-for-valid-env-variables.sh:/docker-entrypoint-initdb.d/10-test-for-valid-env-variables.sh
      - ./docker/postgres-initdb.d/20-create-admin-db-and-user.sh:/docker-entrypoint-initdb.d/20-create-admin-db-and-user.sh
      - ./docker/postgres-initdb.d/40-create-report-db-and-user.sh:/docker-entrypoint-initdb.d/40-create-report-db-and-user.sh
      # The following file adds the CREATEDB privilege to the db users to enable it
      # to run the django tests.
      # THIS SHOULD NOT BE USED IN PRODUCTION!!!
      - ./dev-environment/postgres-initdb.d/50-add-createdb-permissions.sh:/docker-entrypoint-initdb.d/50-add-createdb-permissions.sh

  queue:
    # Normally, we expect the `rabbitmq` image. The -management images come
    # with a set of management plugins installed and enabled by default.
    # They can be accessed through the web interface on port 15672 (or the port
    # it has been remapped to).
    # The credentials are given in the specified `rabbitmq.env` file.
    image: rabbitmq:3-management-alpine
    hostname: os2datascanner_msg_broker
    env_file:
      - dev-environment/rabbitmq.env
    ports:
      - "5672:5672"
      - "8030:15672"

  admin_frontend:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      target: frontend
    volumes:
      - ./src/os2datascanner/projects/admin/adminapp/static/src:/code/src/os2datascanner/projects/admin/adminapp/static/src
      - frontend-bundles-admin:/code/src/os2datascanner/projects/admin/adminapp/static/dist/
      - /code/frontend/mode_modules

  report_frontend:
     build:
       context: .
       dockerfile: docker/report/Dockerfile
       target: frontend
     volumes:
       - ./src/os2datascanner/projects/report/reportapp/static/src:/code/src/os2datascanner/projects/report/reportapp/static/src
       - frontend-bundles-report:/code/src/os2datascanner/projects/report/reportapp/static/dist/
       - /code/frontend/mode_modules

  admin_application:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      target: application
    command: [
      "gunicorn",
      "--config", "/code/docker/gunicorn-settings.py",
      "--workers", "2", # only two workers in local dev - to save some resources
      "--reload", # restart workers when code changes
      "wsgi"
    ]
    volumes:
      - frontend-bundles-admin:/code/src/os2datascanner/projects/admin/adminapp/static/dist/
      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml
      - ./dev-environment/admin/.secret:/code/.secret
      - ./src/os2datascanner:/code/src/os2datascanner
    ports:
      - "8020:5000"
    depends_on:
      - db
      - admin_frontend
      - queue

  admin_collector:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      target: application
    entrypoint: []
    command: python manage.py pipeline_collector
    volumes:
      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - db
      - admin_application
      - queue

  report_application:
    build:
      context: .
      dockerfile: docker/report/Dockerfile
      target: application
    command: [
      "gunicorn",
      "--config", "/code/docker/gunicorn-settings.py",
      "--workers", "2", # only two workers in local dev - to save some resources
      "--reload", # restart workers when code changes
      "wsgi"
    ]
    volumes:
      - frontend-bundles-report:/code/src/os2datascanner/projects/report/reportapp/static/dist/
      - ./dev-environment/report/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    ports:
      - "8040:5000"
    depends_on:
      - db
      - report_frontend
      - queue

  report_collector:
    build:
      context: .
      dockerfile: docker/report/Dockerfile
      target: application
    entrypoint: []
    command: python manage.py pipeline_collector
    volumes:
      - ./dev-environment/report/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - db
      - report_application
      - queue

  engine_explorer:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    command: explorer --enable-metrics
    volumes:
      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - queue

  engine_worker:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    command: worker --enable-metrics
    volumes:
      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - queue

  engine_exporter:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    command: exporter --enable-metrics
    volumes:
      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - queue

  prometheus:
    image: prom/prometheus
    volumes:
      - "./dev-environment/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
    ports:
      - "8050:9090"

  # default user is admin/admin
  grafana:
    image: grafana/grafana
    volumes:
      - "./dev-environment/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro"
      - "./dev-environment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro"
    ports:
      - "8060:3000"

  idp:
    image: magentalabs/simplesamlphp:2.0.0
    environment:
      - SIMPLESAMLPHP_BASEURLPATH=http://localhost:8080/simplesaml/
      - SIMPLESAMLPHP_SP_ENTITY_ID=http://localhost:8040/saml2_auth/acs/
      - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=http://localhost:8040/saml2_auth/acs/
    volumes:
      - ./dev-environment/authsources.php:/var/www/simplesamlphp/config/authsources.php
    ports:
      - "8080:8080"

x-disabled:
  admin_cron:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      target: application
    entrypoint: []
    command: supercronic /code/docker/crontab
    volumes:
      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - db
      - admin_application
      - queue

  report_cron:
    build:
      context: .
      dockerfile: docker/report/Dockerfile
      target: application
    entrypoint: [ ]
    command: supercronic /code/docker/crontab
    volumes:
      - ./dev-environment/report/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - db
      - report_application
      - queue

  engine_processor:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    command: processor --enable-metrics
    volumes:
      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - queue

  engine_matcher:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    command: matcher --enable-metrics
    restart: unless-stopped
    volumes:
      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - queue

  engine_tagger:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    command: tagger --enable-metrics
    volumes:
      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml
      - ./src/os2datascanner:/code/src/os2datascanner
    depends_on:
      - queue


volumes:
  frontend-bundles-admin:
  frontend-bundles-report:
  postgres-data:
  postgres-initdb.d:
