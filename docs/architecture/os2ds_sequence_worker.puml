@startuml
participant worker

queue RabbitMQ as mq


=== Worker stage ==

worker -> worker : message_received_raw(body, channel, source_manager)
activate worker
        alt processor 
                loop os2ds_conversions is not empty
                        worker -> mq : consume(os2ds_conversions)
                        mq -> worker : conversions_message
                        worker -> worker : processor_handler(conversions_message)
                        activate worker
                                alt conversion obtained representation
                                        worker -> mq : os2ds_representations(representations_message)
                                else conversion obtained nested source
                                        worker -> mq : os2ds_scan_specs(scan_spec_message)
                                else conversion failed
                                        worker -> mq : os2ds_problems(problem_message)
                                        worker -> mq : os2ds_checkups(problem_message)
                                end
                        deactivate worker
                end
        else explorer 
                loop os2ds_scan_specs is not empty
                        worker -> mq : consume(os2ds_scan_specs)
                        mq -> worker : scan_spec_message
                        worker -> worker : explorer_handler(scan_spec_message)
                        activate worker
                                alt exploration yielded handles
                                        worker -> mq : os2ds_conversions(conversions_message)
                                else exploration yielded independent sources
                                        worker -> mq : os2ds_scan_specs(scan_spec_message)
                                else exploration failed
                                        worker -> mq : os2ds_problems(problem_message)
                                end

                                worker -> mq : os2ds_status(status_message)
                        deactivate worker
                end
        else matcher
                loop os2ds_representations is not empty
                        worker -> mq : consume(os2ds_representations)
                        mq -> worker : representations_message
                        worker -> worker : match_handler(representations_message)
                        activate worker
                                alt matching without error
                                        alt conclusion
                                                worker -> mq : os2ds_matches(matches_message)
                                                worker -> mq : os2ds_checkups(matches_message)
                                        else needs conversion
                                                worker -> mq : os2ds_conversions(conversions_message)
                                        end
                                else matching error
                                        worker -> mq : os2ds_problems(problem_message)
                                        worker -> mq : os2ds_checkups(problem_message)
                                end
                        deactivate worker
                end
        else tagger
                loop os2ds_handles is not empty
                        worker -> mq : consume(os2ds_handles)
                        mq -> worker : handles_message
                        worker -> worker : tagger_handler(handles_message)
                        activate worker
                                alt metadata extraction successful
                                        worker -> mq : os2ds_metadata(metadata_message)
                                else metadata extraction failed
                                        worker -> mq : os2ds_problems(problem_message)
                                end
                        deactivate worker
                end
        end
        worker -> mq : os2ds_status(status_message)
deactivate worker

@enduml
