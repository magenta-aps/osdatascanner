# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

include:
  - project: labs/salt-automation
    file:
      - gitlab-ci-templates/common/docker-build-meta.v2.yml

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_IMAGE: index.docker.io/magentaaps/document-proxy

  IMAGE: ${CI_REGISTRY_IMAGE}/document-proxy:${CI_COMMIT_SHA}

Build document_proxy:
  stage: build
  needs: []
  services: []
  image:
    name: gcr.io/kaniko-project/executor:v1.6.0-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR/helpers/document-proxy
      --dockerfile=$CI_PROJECT_DIR/helpers/document-proxy/docker/Dockerfile
      --destination=${IMAGE}

Release document_proxy:
  stage: release
  needs:
    - Build document_proxy
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  script:
    - apk add skopeo
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_JOB_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_FROM}"
      "docker://${IMAGE_TO}:${CI_COMMIT_TAG}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_JOB_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_FROM}"
      "docker://${IMAGE_TO}:latest"
  before_script:
    - export IMAGE_FROM="${IMAGE}"
    - export IMAGE_TO="${RELEASE_IMAGE}"

  rules:
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
